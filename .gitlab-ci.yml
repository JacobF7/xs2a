# ------------------------------------------------------------------
# stages
# ------------------------------------------------------------------

stages:
- "build:src"    # build jar and provide as artifact
- "build:qa"     # run tests and code quality checks
- "build:image"  # dockerize jar and push to docker registry
# TODO remove when docker hub images will be applied to deployment https://git.adorsys.de/adorsys/xs2a/aspsp-xs2a/issues/169
- "deploy"       # push to openshift registry (snapshot deployment) or release registry


# ------------------------------------------------------------------
# variables
# ------------------------------------------------------------------

variables: &variables

  ###########################
  # Docker images variables #
  ###########################

  GITLAB_REGISTRY: "gitlab-registry.adorsys.de"
  GITLAB_NAMESPACE: "adorsys/xs2a/aspsp-xs2a"

  DOCKER_NAMESPACE: "docker.io/adorsys"

  OPENSHIFT_REGISTRY: "openshift-registry.adorsys.de:443"

  # XS2A Service
  GITLAB_IMAGE_NAME_XS2A: "${GITLAB_REGISTRY}/${GITLAB_NAMESPACE}"
  DOCKER_IMAGE_NAME_XS2A: "${DOCKER_NAMESPACE}/xs2a-service"

  # Content management service
  GITLAB_IMAGE_NAME_CNT_MGMNT: "${GITLAB_REGISTRY}/${GITLAB_NAMESPACE}/cnt-mgmnt"
  DOCKER_IMAGE_NAME_CNT_MGMNT: "${DOCKER_NAMESPACE}/xs2a-consent-management"

  # ASPSP Mock Server
  GITLAB_IMAGE_NAME_MOCKSRV: "${GITLAB_REGISTRY}/${GITLAB_NAMESPACE}/aspsp-mock-server"
  DOCKER_IMAGE_NAME_MOCKSRV: "${DOCKER_NAMESPACE}/xs2a-mock-server"

  # XS2A IDP Keycloak
  GITLAB_IMAGE_NAME_KEYCLOAK: "${GITLAB_REGISTRY}/${GITLAB_NAMESPACE}/keycloak-xs2a"
  DOCKER_IMAGE_NAME_KEYCLOAK: "${DOCKER_NAMESPACE}/xs2a-idp"

  # XS2A IDP ASPSP Profile
  GITLAB_IMAGE_NAME_ASPSP_PROFILE: "${GITLAB_REGISTRY}/${GITLAB_NAMESPACE}/xs2a-aspsp-profile"
  DOCKER_IMAGE_NAME_ASPSP_PROFILE: "${DOCKER_NAMESPACE}/xs2a-aspsp-profile"

  # Online banking demo
  GITLAB_IMAGE_NAME_ONLINE_BANKING_DEMO: "${GITLAB_REGISTRY}/${GITLAB_NAMESPACE}/online-banking-demo"
  DOCKER_IMAGE_NAME_ONLINE_BANKING_DEMO: "${DOCKER_NAMESPACE}/xs2a-mock-online-banking-backend"

  # Online banking UIapp
  GITLAB_IMAGE_NAME_ONLINE_BANKING_UI: "${GITLAB_REGISTRY}/${GITLAB_NAMESPACE}/online-banking-ui"
  DOCKER_IMAGE_NAME_ONLINE_BANKING_UI: "${DOCKER_NAMESPACE}/xs2a-mock-online-banking-ui"


  ###########################
  # Build variables         #
  ###########################

  JAVA_TOOL_OPTIONS: "-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAM=3G -XX:MaxRAMFraction=3"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"


  ###########################
  # Deployment variables    #
  ###########################

  DEV_NAMESPACE: adorsys-psd2-develop
  INTEG_NAMESPACE: adorsys-psd2-integ
  DEMO_NAMESPACE: adorsys-psd2-demo
  TILLER_NAMESPACE: adorsys-psd2-tiller
  ANSIBLE_VAULT_PASSWORD_FILE: /tmp/vault_pass

# ------------------------------------------------------------------
# reusable yaml anchors
# ------------------------------------------------------------------

.java_artifacts: &java_artifacts
  paths:
    - "spi-mock/target/spi-mock*jar"
    - "consent-management/cms-standalone-service/target/consent-management*jar"
    - "aspsp-profile/aspsp-profile-server/target/aspsp-profile*jar"
    - "aspsp-mock-server/target/aspsp-mock-server*jar"
    - "aspsp-idp/keycloak-provider-extension/keycloak-clientregistration-provider/target/keycloak-clientregistration-provider.jar"
    - "online-banking-demo/target/online-banking-demo*jar"
  name: "$CI_PROJECT_NAME-${CI_BUILD_REF_NAME#*v}"

.angular_artifacts: &angular_artifacts
  paths:
    - "online-banking-demo-ui/dist"
  name: "$CI_PROJECT_NAME-${CI_BUILD_REF_NAME#*v}"

.build_java: &build_java
  stage: "build:src"
  script:
    - cat /sys/fs/cgroup/memory/memory.limit_in_bytes
    - java -XX:+PrintFlagsFinal -version | grep -Ei "maxheapsize|maxram"
    - mvn -DskipTests clean install

.build_angular: &build_angular
  stage: "build:src"
  image: "alexsuch/angular-cli:6.0.1"
  script:
    - cd online-banking-demo-ui
    - npm install
    - npm run build --prod

.java_tests: &java_tests
  stage: "build:qa"
  script:
    - cat /sys/fs/cgroup/memory/memory.limit_in_bytes
    - java -XX:+PrintFlagsFinal -version | grep -Ei "maxheapsize|maxram"
    - mvn --fail-at-end clean install

# Test building docker images
.test_docker_image: &test_docker_image
  script:
    - docker build -t "$DOCKER_IMAGE_NAME_XS2A:$DOCKER_TAG" spi-mock
    - docker build -t "$DOCKER_IMAGE_NAME_MOCKSRV:$DOCKER_TAG" aspsp-mock-server
    - docker build -t "$DOCKER_IMAGE_NAME_KEYCLOAK:$DOCKER_TAG" aspsp-idp
    - docker build -t "$DOCKER_IMAGE_NAME_CNT_MGMNT:$DOCKER_TAG" consent-management/cms-standalone-service
    - docker build -t "$DOCKER_IMAGE_NAME_ASPSP_PROFILE:$DOCKER_TAG" aspsp-profile/aspsp-profile-server
    - docker build -t "$DOCKER_IMAGE_NAME_ONLINE_BANKING_DEMO:$DOCKER_TAG" online-banking-demo
    - docker build -t "$DOCKER_IMAGE_NAME_ONLINE_BANKING_UI:$DOCKER_TAG" online-banking-demo-ui

# Build docker images and put them to DOCKER HUB repo
.build_push_dockerhub: &build_push_dockerhub
  script:
    - docker build -t "$DOCKER_IMAGE_NAME_XS2A:$DOCKER_TAG" spi-mock
    - docker build -t "$DOCKER_IMAGE_NAME_MOCKSRV:$DOCKER_TAG" aspsp-mock-server
    - docker build -t "$DOCKER_IMAGE_NAME_KEYCLOAK:$DOCKER_TAG" aspsp-idp
    - docker build -t "$DOCKER_IMAGE_NAME_CNT_MGMNT:$DOCKER_TAG" consent-management/cms-standalone-service
    - docker build -t "$DOCKER_IMAGE_NAME_ASPSP_PROFILE:$DOCKER_TAG" aspsp-profile/aspsp-profile-server
    - docker build -t "$DOCKER_IMAGE_NAME_ONLINE_BANKING_DEMO:$DOCKER_TAG" online-banking-demo
    - docker build -t "$DOCKER_IMAGE_NAME_ONLINE_BANKING_UI:$DOCKER_TAG" online-banking-demo-ui

    - docker login -u $DOCKER_HUB_LOGIN -p $DOCKER_HUB_PASS

    - docker push "$DOCKER_IMAGE_NAME_XS2A:$DOCKER_TAG"
    - docker push "$DOCKER_IMAGE_NAME_MOCKSRV:$DOCKER_TAG"
    - docker push "$DOCKER_IMAGE_NAME_KEYCLOAK:$DOCKER_TAG"
    - docker push "$DOCKER_IMAGE_NAME_CNT_MGMNT:$DOCKER_TAG"
    - docker push "$DOCKER_IMAGE_NAME_ASPSP_PROFILE:$DOCKER_TAG"
    - docker push "$DOCKER_IMAGE_NAME_ONLINE_BANKING_DEMO:$DOCKER_TAG"
    - docker push "$DOCKER_IMAGE_NAME_ONLINE_BANKING_UI:$DOCKER_TAG"

    - docker logout

.helm_env_deploy: &helm_env_deploy
  image: adorsys/ci-helm:2.10
  script:
    - git clone --branch RAT_move_deployment_files https://gitlab-ci-token:${CI_JOB_TOKEN}@git.adorsys.de/adorsys/xs2a/xs2a-openshift.git .helm
    - cd .helm/charts/xs2a
    - helm init --client-only
    - oc login openshift.adorsys.de --token=${HELM_TOKEN}
    - echo "${VAULT_PWD}" > $ANSIBLE_VAULT_PASSWORD_FILE
    - ansible-vault view env/${HELM_VALUE}.enc > env/${HELM_VALUE}
    - SHA=$(skopeo inspect docker://$DOCKER_IMAGE_NAME_ASPSP_PROFILE:$DOCKER_TAG | jq -r .Digest)
    - PROFILE_IMAGE_WITH_SHA="$DOCKER_IMAGE_NAME_ASPSP_PROFILE@$SHA"
    - helm diff upgrade ${HELM_RELEASE} . --set profileImage="$PROFILE_IMAGE_WITH_SHA" --allow-unreleased -q -f env/${HELM_VALUE}
    - helm upgrade -i ${HELM_RELEASE} . --set profileImage="$PROFILE_IMAGE_WITH_SHA" --namespace=${OPENSHIFT_NAMESPACE} --wait --timeout=600 -f env/${HELM_VALUE}

# ------------------------------------------------------------------
# jobs
# ------------------------------------------------------------------

build_package_java8:
  image: "adorsys/openjdk-build-base:8"
  <<: *build_java
  artifacts:
    <<: *java_artifacts
    expire_in: "1 day"

.build_package_java11:
  image: "maven:3.6-jdk-11"
  variables:
    JAVA_TOOL_OPTIONS: "-Djavax.net.ssl.trustStorePassword=changeit -XX:MaxRAM=3G"
  <<: *build_java


build_frontend:
  <<: *build_angular
  artifacts:
    <<: *angular_artifacts
    expire_in: "1 day"

.pmd_report:
  stage: "build:src"
  image: "adorsys/openjdk-build-base:8"
  script:
    - cat /sys/fs/cgroup/memory/memory.limit_in_bytes
    - java -XX:+PrintFlagsFinal -version | grep -Ei "maxheapsize|maxram"
    - mvn -Dmaven.test.skip=true package pmd:pmd
  artifacts:
    paths:
    - "qa/pmd/pmd-ruleset.xml"
    - "**/**/*/pmd.html"
    - "**/*/pmd.xml"
    name: "$CI_PROJECT_NAME-${CI_BUILD_REF_NAME#*v}-pmd"
    expire_in: "10 day"

.check_pmd:
  stage: "build:qa"
  image: "adorsys/openjdk-build-base:8"
  script:
    - cat /sys/fs/cgroup/memory/memory.limit_in_bytes
    - java -XX:+PrintFlagsFinal -version | grep -Ei "maxheapsize|maxram"
    - mvn -Dmaven.test.skip=true package pmd:check

.check_javadoc:
  stage: "build:qa"
  image: "adorsys/openjdk-build-base:8"
  script:
    - cat /sys/fs/cgroup/memory/memory.limit_in_bytes
    - java -XX:+PrintFlagsFinal -version | grep -Ei "maxheapsize|maxram"
    - mvn -Dmaven.test.skip=true package javadoc:javadoc
  artifacts:
    paths:
    - "**/target/site/*"
    name: "$CI_PROJECT_NAME-${CI_BUILD_REF_NAME#*v}-javadoc"
    expire_in: "10 day"

.check_javadoc_java11:
  stage: "build:qa"
  image: "maven:3.6-jdk-11"
  variables:
    JAVA_TOOL_OPTIONS: "-Djavax.net.ssl.trustStorePassword=changeit -XX:MaxRAM=3G"
  script:
    - cat /sys/fs/cgroup/memory/memory.limit_in_bytes
    - java -XX:+PrintFlagsFinal -version | grep -Ei "maxheapsize|maxram"
    - mvn -Dmaven.test.skip=true package javadoc:javadoc

.unit_tests_java8:
  <<: *java_tests
  image: "adorsys/openjdk-build-base:8"
  artifacts:
    paths:
    - "**/target/surefire-reports/*"
    name: "$CI_PROJECT_NAME-${CI_BUILD_REF_NAME#*v}-*"
    expire_in: "10 day"

.unit_tests_java11:
  <<: *java_tests
  image: "maven:3.6-jdk-11"
  variables:
    JAVA_TOOL_OPTIONS: "-Djavax.net.ssl.trustStorePassword=changeit -XX:MaxRAM=3G"

.test_build_docker:
  stage: "build:qa"
  <<: *test_docker_image
  variables:
    DOCKER_TAG: "snapshot"

push_dockerhub_master_develop:
  stage: "build:image"
  only:
    - develop
    - master
    - TNE_RAT_automatic_deployments
  variables:
    DOCKER_TAG: ${CI_BUILD_REF_NAME}
  <<: *build_push_dockerhub

push_dockerhub_tags:
  stage: "build:image"
  only:
    - tags
  variables:
    DOCKER_TAG: $CI_COMMIT_TAG
  <<: *build_push_dockerhub

push_dockerhub_nightly:
  stage: "build:image"
  only:
    - schedules
  variables:
    DOCKER_TAG: nightly
  <<: *build_push_dockerhub

deploy_dev:
  stage: deploy
  <<: *helm_env_deploy
  only:
    - develop
    - TNE_RAT_automatic_deployments
  variables:
    <<: *variables
    OPENSHIFT_NAMESPACE: "${DEV_NAMESPACE}"
    DOCKER_TAG: "${CI_COMMIT_REF_NAME}"
    HELM_RELEASE: "${CI_ENVIRONMENT_SLUG}-psd2"
    HELM_VALUE: develop.yaml
  environment:
    name: ${CI_COMMIT_REF_NAME}
    url: ~

deploy_demo:
  stage: deploy
  <<: *helm_env_deploy
  only:
    - master
  variables:
    <<: *variables
    OPENSHIFT_NAMESPACE: "${DEMO_NAMESPACE}"
    DOCKER_TAG: "${CI_COMMIT_REF_NAME}"
    HELM_RELEASE: "${CI_ENVIRONMENT_SLUG}-psd2"
    HELM_VALUE: develop.yaml
  environment:
    name: ${CI_COMMIT_REF_NAME}
    url: ~

deploy_integ:
  stage: deploy
  <<: *helm_env_deploy
  only:
    - schedules
  variables:
    <<: *variables
    OPENSHIFT_NAMESPACE: "${INTEG_NAMESPACE}"
    DOCKER_TAG: nightly
    HELM_RELEASE: "${CI_ENVIRONMENT_SLUG}-psd2"
    HELM_VALUE: develop.yaml
  environment:
    name: integ
    url: ~
